IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: true,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: { data: [Function] },
  _eventsCount: 1,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 1684,
        _externalStream: {},
        fd: 13,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: g] listener: [Function: onend] },
           [Function: socketOnEnd] ],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [ [Function: ondrain], [Function: socketOnDrain] ],
        timeout: [Function],
        error: [Function: socketOnError],
        close: 
         [ [Function: serverSocketCloseListener],
           [Function: onServerResponseClose] ],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [Function: app]
              use: [Function],
              handle: [Function],
              listen: [Function],
              domain: undefined,
              _events: { mount: [Function] },
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              route: '/',
              stack: 
               [ { route: '', handle: [Function: query] },
                 { route: '', handle: [Function: expressInit] },
                 { route: '', handle: [Function: rawParser] },
                 { route: '', handle: [Function: jsonParser] },
                 { route: '', handle: [Function: bodyParser] },
                 { route: '', handle: [Function: router] } ],
              init: [Function],
              defaultConfiguration: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              configure: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              settings: 
               { 'x-powered-by': true,
                 etag: true,
                 env: 'development',
                 'subdomain offset': 2,
                 view: [Function: View],
                 views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                 'jsonp callback name': 'callback',
                 'json spaces': 0 },
              engines: {},
              _eventsCount: 1,
              _router: 
               Router {
                 map: 
                  { post: 
                     [ Route {
                         path: '*',
                         method: 'post',
                         callbacks: [ [Function] ],
                         keys: [],
                         regexp: /^(.*)\/?$/i,
                         params: [ '/persona/ejecutaOperacionLote' ] } ] },
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 strict: false,
                 middleware: [Function: router] },
              routes: 
               { post: 
                  [ Route {
                      path: '*',
                      method: 'post',
                      callbacks: [ [Function] ],
                      keys: [],
                      regexp: /^(.*)\/?$/i,
                      params: [ '/persona/ejecutaOperacionLote' ] } ] },
              router: [Getter],
              locals: 
               { [Function: locals]
                 settings: 
                  { 'x-powered-by': true,
                    etag: true,
                    env: 'development',
                    'subdomain offset': 2,
                    view: [Function: View],
                    views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                    'jsonp callback name': 'callback',
                    'json spaces': 0 } },
              _usedRouter: true },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: 11,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::9094' },
     _server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [Function: app]
              use: [Function],
              handle: [Function],
              listen: [Function],
              domain: undefined,
              _events: { mount: [Function] },
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              route: '/',
              stack: 
               [ { route: '', handle: [Function: query] },
                 { route: '', handle: [Function: expressInit] },
                 { route: '', handle: [Function: rawParser] },
                 { route: '', handle: [Function: jsonParser] },
                 { route: '', handle: [Function: bodyParser] },
                 { route: '', handle: [Function: router] } ],
              init: [Function],
              defaultConfiguration: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              configure: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              settings: 
               { 'x-powered-by': true,
                 etag: true,
                 env: 'development',
                 'subdomain offset': 2,
                 view: [Function: View],
                 views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                 'jsonp callback name': 'callback',
                 'json spaces': 0 },
              engines: {},
              _eventsCount: 1,
              _router: 
               Router {
                 map: 
                  { post: 
                     [ Route {
                         path: '*',
                         method: 'post',
                         callbacks: [ [Function] ],
                         keys: [],
                         regexp: /^(.*)\/?$/i,
                         params: [ '/persona/ejecutaOperacionLote' ] } ] },
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 strict: false,
                 middleware: [Function: router] },
              routes: 
               { post: 
                  [ Route {
                      path: '*',
                      method: 'post',
                      callbacks: [ [Function] ],
                      keys: [],
                      regexp: /^(.*)\/?$/i,
                      params: [ '/persona/ejecutaOperacionLote' ] } ] },
              router: [Getter],
              locals: 
               { [Function: locals]
                 settings: 
                  { 'x-powered-by': true,
                    etag: true,
                    env: 'development',
                    'subdomain offset': 2,
                    view: [Function: View],
                    views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                    'jsonp callback name': 'callback',
                    'json spaces': 0 } },
              _usedRouter: true },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: 11,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::9094' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3456,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: { finish: [Function: resOnFinish] },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: { 'x-powered-by': 'Express' },
        _headerNames: { 'x-powered-by': 'X-Powered-By' },
        _onPendingData: [Function: updateOutgoingData],
        req: [Circular],
        locals: [Function: locals] } },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 1684,
        _externalStream: {},
        fd: 13,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: g] listener: [Function: onend] },
           [Function: socketOnEnd] ],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [ [Function: ondrain], [Function: socketOnDrain] ],
        timeout: [Function],
        error: [Function: socketOnError],
        close: 
         [ [Function: serverSocketCloseListener],
           [Function: onServerResponseClose] ],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [Function: app]
              use: [Function],
              handle: [Function],
              listen: [Function],
              domain: undefined,
              _events: { mount: [Function] },
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              route: '/',
              stack: 
               [ { route: '', handle: [Function: query] },
                 { route: '', handle: [Function: expressInit] },
                 { route: '', handle: [Function: rawParser] },
                 { route: '', handle: [Function: jsonParser] },
                 { route: '', handle: [Function: bodyParser] },
                 { route: '', handle: [Function: router] } ],
              init: [Function],
              defaultConfiguration: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              configure: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              settings: 
               { 'x-powered-by': true,
                 etag: true,
                 env: 'development',
                 'subdomain offset': 2,
                 view: [Function: View],
                 views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                 'jsonp callback name': 'callback',
                 'json spaces': 0 },
              engines: {},
              _eventsCount: 1,
              _router: 
               Router {
                 map: 
                  { post: 
                     [ Route {
                         path: '*',
                         method: 'post',
                         callbacks: [ [Function] ],
                         keys: [],
                         regexp: /^(.*)\/?$/i,
                         params: [ '/persona/ejecutaOperacionLote' ] } ] },
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 strict: false,
                 middleware: [Function: router] },
              routes: 
               { post: 
                  [ Route {
                      path: '*',
                      method: 'post',
                      callbacks: [ [Function] ],
                      keys: [],
                      regexp: /^(.*)\/?$/i,
                      params: [ '/persona/ejecutaOperacionLote' ] } ] },
              router: [Getter],
              locals: 
               { [Function: locals]
                 settings: 
                  { 'x-powered-by': true,
                    etag: true,
                    env: 'development',
                    'subdomain offset': 2,
                    view: [Function: View],
                    views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                    'jsonp callback name': 'callback',
                    'json spaces': 0 } },
              _usedRouter: true },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: 11,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::9094' },
     _server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [Function: app]
              use: [Function],
              handle: [Function],
              listen: [Function],
              domain: undefined,
              _events: { mount: [Function] },
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              route: '/',
              stack: 
               [ { route: '', handle: [Function: query] },
                 { route: '', handle: [Function: expressInit] },
                 { route: '', handle: [Function: rawParser] },
                 { route: '', handle: [Function: jsonParser] },
                 { route: '', handle: [Function: bodyParser] },
                 { route: '', handle: [Function: router] } ],
              init: [Function],
              defaultConfiguration: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              configure: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              settings: 
               { 'x-powered-by': true,
                 etag: true,
                 env: 'development',
                 'subdomain offset': 2,
                 view: [Function: View],
                 views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                 'jsonp callback name': 'callback',
                 'json spaces': 0 },
              engines: {},
              _eventsCount: 1,
              _router: 
               Router {
                 map: 
                  { post: 
                     [ Route {
                         path: '*',
                         method: 'post',
                         callbacks: [ [Function] ],
                         keys: [],
                         regexp: /^(.*)\/?$/i,
                         params: [ '/persona/ejecutaOperacionLote' ] } ] },
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 strict: false,
                 middleware: [Function: router] },
              routes: 
               { post: 
                  [ Route {
                      path: '*',
                      method: 'post',
                      callbacks: [ [Function] ],
                      keys: [],
                      regexp: /^(.*)\/?$/i,
                      params: [ '/persona/ejecutaOperacionLote' ] } ] },
              router: [Getter],
              locals: 
               { [Function: locals]
                 settings: 
                  { 'x-powered-by': true,
                    etag: true,
                    env: 'development',
                    'subdomain offset': 2,
                    view: [Function: View],
                    views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                    'jsonp callback name': 'callback',
                    'json spaces': 0 } },
              _usedRouter: true },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: 11,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::9094' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3456,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: { finish: [Function: resOnFinish] },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: { 'x-powered-by': 'Express' },
        _headerNames: { 'x-powered-by': 'X-Powered-By' },
        _onPendingData: [Function: updateOutgoingData],
        req: [Circular],
        locals: [Function: locals] } },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { accept: 'application/json, application/*+json',
     'content-type': 'multipart/form-data;boundary=zIOsPe5QbFi09LYqfBOeG-3vTKgA6JMnY',
     'user-agent': 'Java/1.8.0_131',
     host: 'localhost:9094',
     connection: 'keep-alive',
     'content-length': '1417' },
  rawHeaders: 
   [ 'Accept',
     'application/json, application/*+json',
     'Content-Type',
     'multipart/form-data;boundary=zIOsPe5QbFi09LYqfBOeG-3vTKgA6JMnY',
     'User-Agent',
     'Java/1.8.0_131',
     'Host',
     'localhost:9094',
     'Connection',
     'keep-alive',
     'Content-Length',
     '1417' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/persona/ejecutaOperacionLote',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 1684,
        _externalStream: {},
        fd: 13,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: g] listener: [Function: onend] },
           [Function: socketOnEnd] ],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [ [Function: ondrain], [Function: socketOnDrain] ],
        timeout: [Function],
        error: [Function: socketOnError],
        close: 
         [ [Function: serverSocketCloseListener],
           [Function: onServerResponseClose] ],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [Function: app]
              use: [Function],
              handle: [Function],
              listen: [Function],
              domain: undefined,
              _events: { mount: [Function] },
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              route: '/',
              stack: 
               [ { route: '', handle: [Function: query] },
                 { route: '', handle: [Function: expressInit] },
                 { route: '', handle: [Function: rawParser] },
                 { route: '', handle: [Function: jsonParser] },
                 { route: '', handle: [Function: bodyParser] },
                 { route: '', handle: [Function: router] } ],
              init: [Function],
              defaultConfiguration: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              configure: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              settings: 
               { 'x-powered-by': true,
                 etag: true,
                 env: 'development',
                 'subdomain offset': 2,
                 view: [Function: View],
                 views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                 'jsonp callback name': 'callback',
                 'json spaces': 0 },
              engines: {},
              _eventsCount: 1,
              _router: 
               Router {
                 map: 
                  { post: 
                     [ Route {
                         path: '*',
                         method: 'post',
                         callbacks: [ [Function] ],
                         keys: [],
                         regexp: /^(.*)\/?$/i,
                         params: [ '/persona/ejecutaOperacionLote' ] } ] },
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 strict: false,
                 middleware: [Function: router] },
              routes: 
               { post: 
                  [ Route {
                      path: '*',
                      method: 'post',
                      callbacks: [ [Function] ],
                      keys: [],
                      regexp: /^(.*)\/?$/i,
                      params: [ '/persona/ejecutaOperacionLote' ] } ] },
              router: [Getter],
              locals: 
               { [Function: locals]
                 settings: 
                  { 'x-powered-by': true,
                    etag: true,
                    env: 'development',
                    'subdomain offset': 2,
                    view: [Function: View],
                    views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                    'jsonp callback name': 'callback',
                    'json spaces': 0 } },
              _usedRouter: true },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: 11,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::9094' },
     _server: 
      Server {
        domain: null,
        _events: 
         { request: 
            { [Function: app]
              use: [Function],
              handle: [Function],
              listen: [Function],
              domain: undefined,
              _events: { mount: [Function] },
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              route: '/',
              stack: 
               [ { route: '', handle: [Function: query] },
                 { route: '', handle: [Function: expressInit] },
                 { route: '', handle: [Function: rawParser] },
                 { route: '', handle: [Function: jsonParser] },
                 { route: '', handle: [Function: bodyParser] },
                 { route: '', handle: [Function: router] } ],
              init: [Function],
              defaultConfiguration: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              configure: [Function],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              settings: 
               { 'x-powered-by': true,
                 etag: true,
                 env: 'development',
                 'subdomain offset': 2,
                 view: [Function: View],
                 views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                 'jsonp callback name': 'callback',
                 'json spaces': 0 },
              engines: {},
              _eventsCount: 1,
              _router: 
               Router {
                 map: 
                  { post: 
                     [ Route {
                         path: '*',
                         method: 'post',
                         callbacks: [ [Function] ],
                         keys: [],
                         regexp: /^(.*)\/?$/i,
                         params: [ '/persona/ejecutaOperacionLote' ] } ] },
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 strict: false,
                 middleware: [Function: router] },
              routes: 
               { post: 
                  [ Route {
                      path: '*',
                      method: 'post',
                      callbacks: [ [Function] ],
                      keys: [],
                      regexp: /^(.*)\/?$/i,
                      params: [ '/persona/ejecutaOperacionLote' ] } ] },
              router: [Getter],
              locals: 
               { [Function: locals]
                 settings: 
                  { 'x-powered-by': true,
                    etag: true,
                    env: 'development',
                    'subdomain offset': 2,
                    view: [Function: View],
                    views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                    'jsonp callback name': 'callback',
                    'json spaces': 0 } },
              _usedRouter: true },
           connection: [Function: connectionListener] },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: 11,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::9094' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 3456,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: { finish: [Function: resOnFinish] },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: { 'x-powered-by': 'Express' },
        _headerNames: { 'x-powered-by': 'X-Powered-By' },
        _onPendingData: [Function: updateOutgoingData],
        req: [Circular],
        locals: [Function: locals] } },
  _consuming: false,
  _dumped: false,
  originalUrl: '/persona/ejecutaOperacionLote',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/persona/ejecutaOperacionLote',
     path: '/persona/ejecutaOperacionLote',
     href: '/persona/ejecutaOperacionLote' },
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Function: resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedHeader: {},
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           bytesRead: 1684,
           _externalStream: {},
           fd: 13,
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: g] listener: [Function: onend] },
              [Function: socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: socketOnDrain] ],
           timeout: [Function],
           error: [Function: socketOnError],
           close: 
            [ [Function: serverSocketCloseListener],
              [Function: onServerResponseClose] ],
           data: [Function: socketOnData],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [Function: app]
                 use: [Function],
                 handle: [Function],
                 listen: [Function],
                 domain: undefined,
                 _events: { mount: [Function] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 route: '/',
                 stack: 
                  [ { route: '', handle: [Function: query] },
                    { route: '', handle: [Function: expressInit] },
                    { route: '', handle: [Function: rawParser] },
                    { route: '', handle: [Function: jsonParser] },
                    { route: '', handle: [Function: bodyParser] },
                    { route: '', handle: [Function: router] } ],
                 init: [Function],
                 defaultConfiguration: [Function],
                 engine: [Function],
                 param: [Function],
                 set: [Function],
                 path: [Function],
                 enabled: [Function],
                 disabled: [Function],
                 enable: [Function],
                 disable: [Function],
                 configure: [Function],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function],
                 del: [Function],
                 render: [Function],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: true,
                    env: 'development',
                    'subdomain offset': 2,
                    view: [Function: View],
                    views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                    'jsonp callback name': 'callback',
                    'json spaces': 0 },
                 engines: {},
                 _eventsCount: 1,
                 _router: 
                  Router {
                    map: 
                     { post: 
                        [ Route {
                            path: '*',
                            method: 'post',
                            callbacks: [ [Function] ],
                            keys: [],
                            regexp: /^(.*)\/?$/i,
                            params: [ '/persona/ejecutaOperacionLote' ] } ] },
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    strict: false,
                    middleware: [Function: router] },
                 routes: 
                  { post: 
                     [ Route {
                         path: '*',
                         method: 'post',
                         callbacks: [ [Function] ],
                         keys: [],
                         regexp: /^(.*)\/?$/i,
                         params: [ '/persona/ejecutaOperacionLote' ] } ] },
                 router: [Getter],
                 locals: 
                  { [Function: locals]
                    settings: 
                     { 'x-powered-by': true,
                       etag: true,
                       env: 'development',
                       'subdomain offset': 2,
                       view: [Function: View],
                       views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                       'jsonp callback name': 'callback',
                       'json spaces': 0 } },
                 _usedRouter: true },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: 11,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::9094' },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [Function: app]
                 use: [Function],
                 handle: [Function],
                 listen: [Function],
                 domain: undefined,
                 _events: { mount: [Function] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 route: '/',
                 stack: 
                  [ { route: '', handle: [Function: query] },
                    { route: '', handle: [Function: expressInit] },
                    { route: '', handle: [Function: rawParser] },
                    { route: '', handle: [Function: jsonParser] },
                    { route: '', handle: [Function: bodyParser] },
                    { route: '', handle: [Function: router] } ],
                 init: [Function],
                 defaultConfiguration: [Function],
                 engine: [Function],
                 param: [Function],
                 set: [Function],
                 path: [Function],
                 enabled: [Function],
                 disabled: [Function],
                 enable: [Function],
                 disable: [Function],
                 configure: [Function],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function],
                 del: [Function],
                 render: [Function],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: true,
                    env: 'development',
                    'subdomain offset': 2,
                    view: [Function: View],
                    views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                    'jsonp callback name': 'callback',
                    'json spaces': 0 },
                 engines: {},
                 _eventsCount: 1,
                 _router: 
                  Router {
                    map: 
                     { post: 
                        [ Route {
                            path: '*',
                            method: 'post',
                            callbacks: [ [Function] ],
                            keys: [],
                            regexp: /^(.*)\/?$/i,
                            params: [ '/persona/ejecutaOperacionLote' ] } ] },
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    strict: false,
                    middleware: [Function: router] },
                 routes: 
                  { post: 
                     [ Route {
                         path: '*',
                         method: 'post',
                         callbacks: [ [Function] ],
                         keys: [],
                         regexp: /^(.*)\/?$/i,
                         params: [ '/persona/ejecutaOperacionLote' ] } ] },
                 router: [Getter],
                 locals: 
                  { [Function: locals]
                    settings: 
                     { 'x-powered-by': true,
                       etag: true,
                       env: 'development',
                       'subdomain offset': 2,
                       view: [Function: View],
                       views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                       'jsonp callback name': 'callback',
                       'json spaces': 0 } },
                 _usedRouter: true },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: 11,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::9094' },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 3456,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           bytesRead: 1684,
           _externalStream: {},
           fd: 13,
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0,
           _consumed: true },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: g] listener: [Function: onend] },
              [Function: socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: socketOnDrain] ],
           timeout: [Function],
           error: [Function: socketOnError],
           close: 
            [ [Function: serverSocketCloseListener],
              [Function: onServerResponseClose] ],
           data: [Function: socketOnData],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause] },
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [Function: app]
                 use: [Function],
                 handle: [Function],
                 listen: [Function],
                 domain: undefined,
                 _events: { mount: [Function] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 route: '/',
                 stack: 
                  [ { route: '', handle: [Function: query] },
                    { route: '', handle: [Function: expressInit] },
                    { route: '', handle: [Function: rawParser] },
                    { route: '', handle: [Function: jsonParser] },
                    { route: '', handle: [Function: bodyParser] },
                    { route: '', handle: [Function: router] } ],
                 init: [Function],
                 defaultConfiguration: [Function],
                 engine: [Function],
                 param: [Function],
                 set: [Function],
                 path: [Function],
                 enabled: [Function],
                 disabled: [Function],
                 enable: [Function],
                 disable: [Function],
                 configure: [Function],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function],
                 del: [Function],
                 render: [Function],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: true,
                    env: 'development',
                    'subdomain offset': 2,
                    view: [Function: View],
                    views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                    'jsonp callback name': 'callback',
                    'json spaces': 0 },
                 engines: {},
                 _eventsCount: 1,
                 _router: 
                  Router {
                    map: 
                     { post: 
                        [ Route {
                            path: '*',
                            method: 'post',
                            callbacks: [ [Function] ],
                            keys: [],
                            regexp: /^(.*)\/?$/i,
                            params: [ '/persona/ejecutaOperacionLote' ] } ] },
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    strict: false,
                    middleware: [Function: router] },
                 routes: 
                  { post: 
                     [ Route {
                         path: '*',
                         method: 'post',
                         callbacks: [ [Function] ],
                         keys: [],
                         regexp: /^(.*)\/?$/i,
                         params: [ '/persona/ejecutaOperacionLote' ] } ] },
                 router: [Getter],
                 locals: 
                  { [Function: locals]
                    settings: 
                     { 'x-powered-by': true,
                       etag: true,
                       env: 'development',
                       'subdomain offset': 2,
                       view: [Function: View],
                       views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                       'jsonp callback name': 'callback',
                       'json spaces': 0 } },
                 _usedRouter: true },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: 11,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::9094' },
        _server: 
         Server {
           domain: null,
           _events: 
            { request: 
               { [Function: app]
                 use: [Function],
                 handle: [Function],
                 listen: [Function],
                 domain: undefined,
                 _events: { mount: [Function] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 route: '/',
                 stack: 
                  [ { route: '', handle: [Function: query] },
                    { route: '', handle: [Function: expressInit] },
                    { route: '', handle: [Function: rawParser] },
                    { route: '', handle: [Function: jsonParser] },
                    { route: '', handle: [Function: bodyParser] },
                    { route: '', handle: [Function: router] } ],
                 init: [Function],
                 defaultConfiguration: [Function],
                 engine: [Function],
                 param: [Function],
                 set: [Function],
                 path: [Function],
                 enabled: [Function],
                 disabled: [Function],
                 enable: [Function],
                 disable: [Function],
                 configure: [Function],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function],
                 del: [Function],
                 render: [Function],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: true,
                    env: 'development',
                    'subdomain offset': 2,
                    view: [Function: View],
                    views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                    'jsonp callback name': 'callback',
                    'json spaces': 0 },
                 engines: {},
                 _eventsCount: 1,
                 _router: 
                  Router {
                    map: 
                     { post: 
                        [ Route {
                            path: '*',
                            method: 'post',
                            callbacks: [ [Function] ],
                            keys: [],
                            regexp: /^(.*)\/?$/i,
                            params: [ '/persona/ejecutaOperacionLote' ] } ] },
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    strict: false,
                    middleware: [Function: router] },
                 routes: 
                  { post: 
                     [ Route {
                         path: '*',
                         method: 'post',
                         callbacks: [ [Function] ],
                         keys: [],
                         regexp: /^(.*)\/?$/i,
                         params: [ '/persona/ejecutaOperacionLote' ] } ] },
                 router: [Getter],
                 locals: 
                  { [Function: locals]
                    settings: 
                     { 'x-powered-by': true,
                       etag: true,
                       env: 'development',
                       'subdomain offset': 2,
                       view: [Function: View],
                       views: '/home/nova/Documentos/MODIFICACION LUNES 14 DE MAYO 18/validador-swagger/views',
                       'jsonp callback name': 'callback',
                       'json spaces': 0 } },
                 _usedRouter: true },
              connection: [Function: connectionListener] },
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: 11,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _pendingResponseData: 0,
           _connectionKey: '6::::9094' },
        _idleTimeout: 120000,
        _idleNext: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idlePrev: 
         TimersList {
           _idleNext: [Circular],
           _idlePrev: [Circular],
           _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
           _unrefed: true,
           msecs: 120000,
           nextTick: false },
        _idleStart: 3456,
        parser: 
         HTTPParser {
           '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           '4': [Function: onParserExecute],
           _headers: [],
           _url: '',
           _consumed: true,
           socket: [Circular],
           incoming: [Circular],
           outgoing: null,
           maxHeaderPairs: 2000,
           onIncoming: [Function: parserOnIncoming] },
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     _header: null,
     _headers: { 'x-powered-by': 'Express' },
     _headerNames: { 'x-powered-by': 'X-Powered-By' },
     _onPendingData: [Function: updateOutgoingData],
     req: [Circular],
     locals: [Function: locals] },
  next: [Function: next],
  body: {},
  _route_index: 0,
  route: 
   Route {
     path: '*',
     method: 'post',
     callbacks: [ [Function] ],
     keys: [],
     regexp: /^(.*)\/?$/i,
     params: [ '/persona/ejecutaOperacionLote' ] },
  params: [ '/persona/ejecutaOperacionLote' ] }